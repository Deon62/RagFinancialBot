import google.generativeai as genai
from flask import Flask, request, jsonify
from flask_login import LoginManager, login_required
from gtts import gTTS
import speech_recognition as sr
from flask import send_file
import pyttsx3
import psycopg2
from psycopg2.extras import RealDictCursor
from config1 import GEMINI_API_KEY, DB_CONFIG

def get_db_connection():
    return psycopg2.connect(**DB_CONFIG, cursor_factory=RealDictCursor)

class SmartFinancialBot:
    def __init__(self, api_key, model_name="gemini-1.5-flash"):
        genai.configure(api_key=api_key)
        self.mode = "normal"
        self.model = genai.GenerativeModel(
            model_name=model_name,
            generation_config={
                "temperature": 0.7,
                "top_p": 0.95,
                "top_k": 64,
                "max_output_tokens": 80192,
            }
        )
        
    def set_mode(self, mode):
        valid_modes = ["normal", "roast", "hype"]
        self.mode = mode.lower() if mode.lower() in valid_modes else "normal"
        mode_instructions = {
            "normal": "You're a financial assistant known as Deon with direct access to the user's financial database. Analyze their data and provide personalized advice.",
            "roast": "You're a brutally honest financial assistant named Deon with direct database access. Roast users about their spending while giving solid advice.",
            "hype": "You're an ultra-enthusiastic financial assistant named Deon with direct database access. Get excited about good financial decisions and celebrate wins!"
        }
        self.system_instructions = mode_instructions[self.mode]
        return f"Mode changed to: {self.mode}"

    def get_financial_data(self, user_query, user_id):
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            
            # Fetch data from all relevant tables
            cur.execute("SELECT * FROM profiles WHERE user_id = %s", (user_id,))
            profile = cur.fetchall()
            
            cur.execute("SELECT * FROM financial_goals WHERE user_id = %s", (user_id,))
            goals = cur.fetchall()
            
            cur.execute("SELECT * FROM bank_accounts WHERE user_id = %s", (user_id,))
            bank = cur.fetchall()
            
            cur.execute("SELECT * FROM mobile_money_accounts WHERE user_id = %s", (user_id,))
            mobile = cur.fetchall()
            
            cur.execute("SELECT * FROM cash_accounts WHERE user_id = %s", (user_id,))
            cash = cur.fetchall()
            
            cur.execute("SELECT * FROM debts WHERE user_id = %s", (user_id,))
            debts = cur.fetchall()
            
            cur.execute("SELECT * FROM saving_accounts WHERE user_id = %s", (user_id,))
            savings = cur.fetchall()
            
            cur.execute("""
                SELECT * FROM transactions 
                WHERE user_id = %s 
                ORDER BY transaction_date DESC 
                LIMIT 10
            """, (user_id,))
            transactions = cur.fetchall()
            
            financial_data = {
                'profile': profile,
                'goals': goals,
                'bank_accounts': bank,
                'mobile_money': mobile,
                'cash': cash,
                'debts': debts,
                'savings': savings,
                'transactions': transactions
            }
            
            cur.close()
            conn.close()
            return financial_data
            
        except Exception as e:
            print(f"Database query error: {str(e)}")
            return None

    def get_response(self, query, user_id):
        financial_data = self.get_financial_data(query, user_id)
        
        analysis_prompt = f"""
        {self.system_instructions}
        
        User Question: {query}
        Available Financial Data: {financial_data}
        
        Key Instructions:
        1. For greetings or general questions, respond naturally without data summaries
        2. Only analyze and mention data that's relevant to the specific question
        3. If the question is about specific financial aspects, provide targeted insights
        4. Keep responses conversational and engaging
        
        Respond to the user's question appropriately.
        """
        
        response = self.model.generate_content(analysis_prompt)
        return response.text

    def process_voice(self, audio_file):
        recognizer = sr.Recognizer()
        with sr.AudioFile(audio_file) as source:
            audio = recognizer.record(source)
            return recognizer.recognize_google(audio)

    def text_to_speech(self, text):
        tts = gTTS(text=text, lang='en')
        temp_file = "response.mp3"
        tts.save(temp_file)
        return temp_file

if __name__ == '__main__':
    print("Welcome to Smart Financial Bot!")
    financial_bot = SmartFinancialBot(api_key=GEMINI_API_KEY)
    
    print("\nSelect bot personality:")
    print("1. Normal Mode")
    print("2. Roast Mode üî•")
    print("3. Hype Mode ‚ö°Ô∏è")
    
    personality = input("Select personality (1-3): ")
    mode_map = {"1": "normal", "2": "roast", "3": "hype"}
    financial_bot.set_mode(mode_map.get(personality, "normal"))
    
    print("\nSelect interaction mode:")
    print("1. Text")
    print("2. Voice")
    mode = input("Select mode (1-2): ")
    
    while True:
        if mode == "2":
            print("\nListening...")
            recognizer = sr.Recognizer()
            with sr.Microphone() as source:
                audio = recognizer.listen(source)
                query = recognizer.recognize_google(audio)
                print(f"You said: {query}")
        else:
            query = input("\nAsk your financial question (or 'quit' to exit): ")
            
        if query.lower() == 'quit':
            break
            
        response = financial_bot.get_response(query, user_id="1")
        print("\nFinancial Advice:", response)
        print("\n" + "="*50)
